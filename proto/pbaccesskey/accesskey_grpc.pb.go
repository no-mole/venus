// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: accesskey.proto

package pbaccesskey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessKeyServiceClient is the client API for AccessKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessKeyServiceClient interface {
	AccessKeyGen(ctx context.Context, in *AccessKeyInfo, opts ...grpc.CallOption) (*AccessKeyInfo, error)
	AccessKeyDel(ctx context.Context, in *AccessKeyInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AccessKeyChangeStatus(ctx context.Context, in *AccessKeyStatusChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AccessKeyLogin(ctx context.Context, in *AccessKeyLoginRequest, opts ...grpc.CallOption) (*AccessKeyInfo, error)
	AccessKeyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessKeyListResponse, error)
	AccessKeyAddNamespace(ctx context.Context, in *AccessKeyNamespaceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AccessKeyDelNamespace(ctx context.Context, in *AccessKeyNamespaceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AccessKeyNamespaceList(ctx context.Context, in *AccessKeyNamespaceListRequest, opts ...grpc.CallOption) (*AccessKeyNamespaceListResponse, error)
}

type accessKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessKeyServiceClient(cc grpc.ClientConnInterface) AccessKeyServiceClient {
	return &accessKeyServiceClient{cc}
}

func (c *accessKeyServiceClient) AccessKeyGen(ctx context.Context, in *AccessKeyInfo, opts ...grpc.CallOption) (*AccessKeyInfo, error) {
	out := new(AccessKeyInfo)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyDel(ctx context.Context, in *AccessKeyInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyChangeStatus(ctx context.Context, in *AccessKeyStatusChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyLogin(ctx context.Context, in *AccessKeyLoginRequest, opts ...grpc.CallOption) (*AccessKeyInfo, error) {
	out := new(AccessKeyInfo)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessKeyListResponse, error) {
	out := new(AccessKeyListResponse)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyAddNamespace(ctx context.Context, in *AccessKeyNamespaceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyAddNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyDelNamespace(ctx context.Context, in *AccessKeyNamespaceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyDelNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) AccessKeyNamespaceList(ctx context.Context, in *AccessKeyNamespaceListRequest, opts ...grpc.CallOption) (*AccessKeyNamespaceListResponse, error) {
	out := new(AccessKeyNamespaceListResponse)
	err := c.cc.Invoke(ctx, "/AccessKeyService/AccessKeyNamespaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessKeyServiceServer is the server API for AccessKeyService service.
// All implementations must embed UnimplementedAccessKeyServiceServer
// for forward compatibility
type AccessKeyServiceServer interface {
	AccessKeyGen(context.Context, *AccessKeyInfo) (*AccessKeyInfo, error)
	AccessKeyDel(context.Context, *AccessKeyInfo) (*emptypb.Empty, error)
	AccessKeyChangeStatus(context.Context, *AccessKeyStatusChangeRequest) (*emptypb.Empty, error)
	AccessKeyLogin(context.Context, *AccessKeyLoginRequest) (*AccessKeyInfo, error)
	AccessKeyList(context.Context, *emptypb.Empty) (*AccessKeyListResponse, error)
	AccessKeyAddNamespace(context.Context, *AccessKeyNamespaceInfo) (*emptypb.Empty, error)
	AccessKeyDelNamespace(context.Context, *AccessKeyNamespaceInfo) (*emptypb.Empty, error)
	AccessKeyNamespaceList(context.Context, *AccessKeyNamespaceListRequest) (*AccessKeyNamespaceListResponse, error)
	mustEmbedUnimplementedAccessKeyServiceServer()
}

// UnimplementedAccessKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessKeyServiceServer struct {
}

func (UnimplementedAccessKeyServiceServer) AccessKeyGen(context.Context, *AccessKeyInfo) (*AccessKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyGen not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyDel(context.Context, *AccessKeyInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyDel not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyChangeStatus(context.Context, *AccessKeyStatusChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyChangeStatus not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyLogin(context.Context, *AccessKeyLoginRequest) (*AccessKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyLogin not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyList(context.Context, *emptypb.Empty) (*AccessKeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyList not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyAddNamespace(context.Context, *AccessKeyNamespaceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyAddNamespace not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyDelNamespace(context.Context, *AccessKeyNamespaceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyDelNamespace not implemented")
}
func (UnimplementedAccessKeyServiceServer) AccessKeyNamespaceList(context.Context, *AccessKeyNamespaceListRequest) (*AccessKeyNamespaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessKeyNamespaceList not implemented")
}
func (UnimplementedAccessKeyServiceServer) mustEmbedUnimplementedAccessKeyServiceServer() {}

// UnsafeAccessKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessKeyServiceServer will
// result in compilation errors.
type UnsafeAccessKeyServiceServer interface {
	mustEmbedUnimplementedAccessKeyServiceServer()
}

func RegisterAccessKeyServiceServer(s grpc.ServiceRegistrar, srv AccessKeyServiceServer) {
	s.RegisterService(&AccessKeyService_ServiceDesc, srv)
}

func _AccessKeyService_AccessKeyGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyGen(ctx, req.(*AccessKeyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyDel(ctx, req.(*AccessKeyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyChangeStatus(ctx, req.(*AccessKeyStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyLogin(ctx, req.(*AccessKeyLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyAddNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyNamespaceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyAddNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyAddNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyAddNamespace(ctx, req.(*AccessKeyNamespaceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyDelNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyNamespaceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyDelNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyDelNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyDelNamespace(ctx, req.(*AccessKeyNamespaceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_AccessKeyNamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessKeyNamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).AccessKeyNamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessKeyService/AccessKeyNamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).AccessKeyNamespaceList(ctx, req.(*AccessKeyNamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessKeyService_ServiceDesc is the grpc.ServiceDesc for AccessKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccessKeyService",
	HandlerType: (*AccessKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessKeyGen",
			Handler:    _AccessKeyService_AccessKeyGen_Handler,
		},
		{
			MethodName: "AccessKeyDel",
			Handler:    _AccessKeyService_AccessKeyDel_Handler,
		},
		{
			MethodName: "AccessKeyChangeStatus",
			Handler:    _AccessKeyService_AccessKeyChangeStatus_Handler,
		},
		{
			MethodName: "AccessKeyLogin",
			Handler:    _AccessKeyService_AccessKeyLogin_Handler,
		},
		{
			MethodName: "AccessKeyList",
			Handler:    _AccessKeyService_AccessKeyList_Handler,
		},
		{
			MethodName: "AccessKeyAddNamespace",
			Handler:    _AccessKeyService_AccessKeyAddNamespace_Handler,
		},
		{
			MethodName: "AccessKeyDelNamespace",
			Handler:    _AccessKeyService_AccessKeyDelNamespace_Handler,
		},
		{
			MethodName: "AccessKeyNamespaceList",
			Handler:    _AccessKeyService_AccessKeyNamespaceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accesskey.proto",
}

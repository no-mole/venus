// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: lease.proto

package pblease

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaseServiceClient is the server API for LeaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseServiceClient interface {
	Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*Lease, error)
	TimeToLive(ctx context.Context, in *TimeToLiveRequest, opts ...grpc.CallOption) (*TimeToLiveResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*Lease, error)
	Leases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LeasesResponse, error)
	Keepalive(ctx context.Context, opts ...grpc.CallOption) (LeaseService_KeepaliveClient, error)
	KeepaliveOnce(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseServiceClient(cc grpc.ClientConnInterface) LeaseServiceClient {
	return &leaseServiceClient{cc}
}

func (c *leaseServiceClient) Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/LeaseService/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) TimeToLive(ctx context.Context, in *TimeToLiveRequest, opts ...grpc.CallOption) (*TimeToLiveResponse, error) {
	out := new(TimeToLiveResponse)
	err := c.cc.Invoke(ctx, "/LeaseService/TimeToLive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/LeaseService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) Leases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LeasesResponse, error) {
	out := new(LeasesResponse)
	err := c.cc.Invoke(ctx, "/LeaseService/Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) Keepalive(ctx context.Context, opts ...grpc.CallOption) (LeaseService_KeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &LeaseService_ServiceDesc.Streams[0], "/LeaseService/Keepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaseServiceKeepaliveClient{stream}
	return x, nil
}

type LeaseService_KeepaliveClient interface {
	Send(*KeepaliveRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type leaseServiceKeepaliveClient struct {
	grpc.ClientStream
}

func (x *leaseServiceKeepaliveClient) Send(m *KeepaliveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leaseServiceKeepaliveClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaseServiceClient) KeepaliveOnce(ctx context.Context, in *KeepaliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/LeaseService/KeepaliveOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseServiceServer is the server API for LeaseService service.
// All implementations must embed UnimplementedLeaseServiceServer
// for forward compatibility
type LeaseServiceServer interface {
	Grant(context.Context, *GrantRequest) (*Lease, error)
	TimeToLive(context.Context, *TimeToLiveRequest) (*TimeToLiveResponse, error)
	Revoke(context.Context, *RevokeRequest) (*Lease, error)
	Leases(context.Context, *emptypb.Empty) (*LeasesResponse, error)
	Keepalive(LeaseService_KeepaliveServer) error
	KeepaliveOnce(context.Context, *KeepaliveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaseServiceServer()
}

// UnimplementedLeaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaseServiceServer struct {
}

func (UnimplementedLeaseServiceServer) Grant(context.Context, *GrantRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (UnimplementedLeaseServiceServer) TimeToLive(context.Context, *TimeToLiveRequest) (*TimeToLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeToLive not implemented")
}
func (UnimplementedLeaseServiceServer) Revoke(context.Context, *RevokeRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedLeaseServiceServer) Leases(context.Context, *emptypb.Empty) (*LeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leases not implemented")
}
func (UnimplementedLeaseServiceServer) Keepalive(LeaseService_KeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (UnimplementedLeaseServiceServer) KeepaliveOnce(context.Context, *KeepaliveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepaliveOnce not implemented")
}
func (UnimplementedLeaseServiceServer) mustEmbedUnimplementedLeaseServiceServer() {}

// UnsafeLeaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseServiceServer will
// result in compilation errors.
type UnsafeLeaseServiceServer interface {
	mustEmbedUnimplementedLeaseServiceServer()
}

func RegisterLeaseServiceServer(s grpc.ServiceRegistrar, srv LeaseServiceServer) {
	s.RegisterService(&LeaseService_ServiceDesc, srv)
}

func _LeaseService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaseService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).Grant(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_TimeToLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeToLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).TimeToLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaseService/TimeToLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).TimeToLive(ctx, req.(*TimeToLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaseService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaseService/Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).Leases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_Keepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaseServiceServer).Keepalive(&leaseServiceKeepaliveServer{stream})
}

type LeaseService_KeepaliveServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*KeepaliveRequest, error)
	grpc.ServerStream
}

type leaseServiceKeepaliveServer struct {
	grpc.ServerStream
}

func (x *leaseServiceKeepaliveServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leaseServiceKeepaliveServer) Recv() (*KeepaliveRequest, error) {
	m := new(KeepaliveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LeaseService_KeepaliveOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepaliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).KeepaliveOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaseService/KeepaliveOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).KeepaliveOnce(ctx, req.(*KeepaliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseService_ServiceDesc is the grpc.ServiceDesc for LeaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LeaseService",
	HandlerType: (*LeaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grant",
			Handler:    _LeaseService_Grant_Handler,
		},
		{
			MethodName: "TimeToLive",
			Handler:    _LeaseService_TimeToLive_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _LeaseService_Revoke_Handler,
		},
		{
			MethodName: "Leases",
			Handler:    _LeaseService_Leases_Handler,
		},
		{
			MethodName: "KeepaliveOnce",
			Handler:    _LeaseService_KeepaliveOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Keepalive",
			Handler:       _LeaseService_Keepalive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "lease.proto",
}

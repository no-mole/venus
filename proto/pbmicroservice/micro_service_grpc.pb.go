// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: micro_service.proto

package pbmicroservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroServiceClient is the client API for MicroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroServiceClient interface {
	Register(ctx context.Context, in *RegisterServicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Discovery(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DiscoveryServiceResponse, error)
	ServiceDesc(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ServiceEndpointInfo, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	ListServiceVersions(ctx context.Context, in *ListServiceVersionsRequest, opts ...grpc.CallOption) (*ListServiceVersionsResponse, error)
}

type microServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroServiceClient(cc grpc.ClientConnInterface) MicroServiceClient {
	return &microServiceClient{cc}
}

func (c *microServiceClient) Register(ctx context.Context, in *RegisterServicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/MicroService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microServiceClient) Discovery(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*DiscoveryServiceResponse, error) {
	out := new(DiscoveryServiceResponse)
	err := c.cc.Invoke(ctx, "/MicroService/Discovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microServiceClient) ServiceDesc(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*ServiceEndpointInfo, error) {
	out := new(ServiceEndpointInfo)
	err := c.cc.Invoke(ctx, "/MicroService/ServiceDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/MicroService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microServiceClient) ListServiceVersions(ctx context.Context, in *ListServiceVersionsRequest, opts ...grpc.CallOption) (*ListServiceVersionsResponse, error) {
	out := new(ListServiceVersionsResponse)
	err := c.cc.Invoke(ctx, "/MicroService/ListServiceVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroServiceServer is the server API for MicroService service.
// All implementations must embed UnimplementedMicroServiceServer
// for forward compatibility
type MicroServiceServer interface {
	Register(context.Context, *RegisterServicesRequest) (*emptypb.Empty, error)
	Discovery(context.Context, *ServiceInfo) (*DiscoveryServiceResponse, error)
	ServiceDesc(context.Context, *ServiceInfo) (*ServiceEndpointInfo, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	ListServiceVersions(context.Context, *ListServiceVersionsRequest) (*ListServiceVersionsResponse, error)
	mustEmbedUnimplementedMicroServiceServer()
}

// UnimplementedMicroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroServiceServer struct {
}

func (UnimplementedMicroServiceServer) Register(context.Context, *RegisterServicesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMicroServiceServer) Discovery(context.Context, *ServiceInfo) (*DiscoveryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discovery not implemented")
}
func (UnimplementedMicroServiceServer) ServiceDesc(context.Context, *ServiceInfo) (*ServiceEndpointInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDesc not implemented")
}
func (UnimplementedMicroServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedMicroServiceServer) ListServiceVersions(context.Context, *ListServiceVersionsRequest) (*ListServiceVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceVersions not implemented")
}
func (UnimplementedMicroServiceServer) mustEmbedUnimplementedMicroServiceServer() {}

// UnsafeMicroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroServiceServer will
// result in compilation errors.
type UnsafeMicroServiceServer interface {
	mustEmbedUnimplementedMicroServiceServer()
}

func RegisterMicroServiceServer(s grpc.ServiceRegistrar, srv MicroServiceServer) {
	s.RegisterService(&MicroService_ServiceDesc, srv)
}

func _MicroService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceServer).Register(ctx, req.(*RegisterServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroService_Discovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceServer).Discovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroService/Discovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceServer).Discovery(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroService_ServiceDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceServer).ServiceDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroService/ServiceDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceServer).ServiceDesc(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroService/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroService_ListServiceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceServer).ListServiceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroService/ListServiceVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceServer).ListServiceVersions(ctx, req.(*ListServiceVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroService_ServiceDesc is the grpc.ServiceDesc for MicroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MicroService",
	HandlerType: (*MicroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MicroService_Register_Handler,
		},
		{
			MethodName: "Discovery",
			Handler:    _MicroService_Discovery_Handler,
		},
		{
			MethodName: "ServiceDesc",
			Handler:    _MicroService_ServiceDesc_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _MicroService_ListServices_Handler,
		},
		{
			MethodName: "ListServiceVersions",
			Handler:    _MicroService_ListServiceVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro_service.proto",
}

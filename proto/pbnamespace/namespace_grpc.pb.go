// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: namespace.proto

package pbnamespace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceServiceClient is the client API for NamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceServiceClient interface {
	NamespaceAdd(ctx context.Context, in *NamespaceItem, opts ...grpc.CallOption) (*NamespaceItem, error)
	NamespaceDel(ctx context.Context, in *NamespaceDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamespacesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespacesListResponse, error)
	NamespaceAddUser(ctx context.Context, in *NamespaceUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamespaceDelUser(ctx context.Context, in *NamespaceUserDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamespaceUserList(ctx context.Context, in *NamespaceUserListRequest, opts ...grpc.CallOption) (*NamespaceUserListResponse, error)
	NamespaceAddAccessKey(ctx context.Context, in *NamespaceAccessKeyInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamespaceDelAccessKey(ctx context.Context, in *NamespaceAccessKeyDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamespaceAccessKeyList(ctx context.Context, in *NamespaceAccessKeyListRequest, opts ...grpc.CallOption) (*NamespaceAccessKeyListResponse, error)
}

type namespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceServiceClient(cc grpc.ClientConnInterface) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) NamespaceAdd(ctx context.Context, in *NamespaceItem, opts ...grpc.CallOption) (*NamespaceItem, error) {
	out := new(NamespaceItem)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceDel(ctx context.Context, in *NamespaceDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespacesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespacesListResponse, error) {
	out := new(NamespacesListResponse)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespacesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceAddUser(ctx context.Context, in *NamespaceUserInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceDelUser(ctx context.Context, in *NamespaceUserDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceDelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceUserList(ctx context.Context, in *NamespaceUserListRequest, opts ...grpc.CallOption) (*NamespaceUserListResponse, error) {
	out := new(NamespaceUserListResponse)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceAddAccessKey(ctx context.Context, in *NamespaceAccessKeyInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceAddAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceDelAccessKey(ctx context.Context, in *NamespaceAccessKeyDelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceDelAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) NamespaceAccessKeyList(ctx context.Context, in *NamespaceAccessKeyListRequest, opts ...grpc.CallOption) (*NamespaceAccessKeyListResponse, error) {
	out := new(NamespaceAccessKeyListResponse)
	err := c.cc.Invoke(ctx, "/NamespaceService/NamespaceAccessKeyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServiceServer is the server API for NamespaceService service.
// All implementations must embed UnimplementedNamespaceServiceServer
// for forward compatibility
type NamespaceServiceServer interface {
	NamespaceAdd(context.Context, *NamespaceItem) (*NamespaceItem, error)
	NamespaceDel(context.Context, *NamespaceDelRequest) (*emptypb.Empty, error)
	NamespacesList(context.Context, *emptypb.Empty) (*NamespacesListResponse, error)
	NamespaceAddUser(context.Context, *NamespaceUserInfo) (*emptypb.Empty, error)
	NamespaceDelUser(context.Context, *NamespaceUserDelRequest) (*emptypb.Empty, error)
	NamespaceUserList(context.Context, *NamespaceUserListRequest) (*NamespaceUserListResponse, error)
	NamespaceAddAccessKey(context.Context, *NamespaceAccessKeyInfo) (*emptypb.Empty, error)
	NamespaceDelAccessKey(context.Context, *NamespaceAccessKeyDelRequest) (*emptypb.Empty, error)
	NamespaceAccessKeyList(context.Context, *NamespaceAccessKeyListRequest) (*NamespaceAccessKeyListResponse, error)
	mustEmbedUnimplementedNamespaceServiceServer()
}

// UnimplementedNamespaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServiceServer struct {
}

func (UnimplementedNamespaceServiceServer) NamespaceAdd(context.Context, *NamespaceItem) (*NamespaceItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAdd not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceDel(context.Context, *NamespaceDelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceDel not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespacesList(context.Context, *emptypb.Empty) (*NamespacesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespacesList not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceAddUser(context.Context, *NamespaceUserInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAddUser not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceDelUser(context.Context, *NamespaceUserDelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceDelUser not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceUserList(context.Context, *NamespaceUserListRequest) (*NamespaceUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceUserList not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceAddAccessKey(context.Context, *NamespaceAccessKeyInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAddAccessKey not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceDelAccessKey(context.Context, *NamespaceAccessKeyDelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceDelAccessKey not implemented")
}
func (UnimplementedNamespaceServiceServer) NamespaceAccessKeyList(context.Context, *NamespaceAccessKeyListRequest) (*NamespaceAccessKeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAccessKeyList not implemented")
}
func (UnimplementedNamespaceServiceServer) mustEmbedUnimplementedNamespaceServiceServer() {}

// UnsafeNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServiceServer will
// result in compilation errors.
type UnsafeNamespaceServiceServer interface {
	mustEmbedUnimplementedNamespaceServiceServer()
}

func RegisterNamespaceServiceServer(s grpc.ServiceRegistrar, srv NamespaceServiceServer) {
	s.RegisterService(&NamespaceService_ServiceDesc, srv)
}

func _NamespaceService_NamespaceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceAdd(ctx, req.(*NamespaceItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceDel(ctx, req.(*NamespaceDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespacesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespacesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespacesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespacesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceAddUser(ctx, req.(*NamespaceUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceDelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceUserDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceDelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceDelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceDelUser(ctx, req.(*NamespaceUserDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceUserList(ctx, req.(*NamespaceUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceAddAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAccessKeyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceAddAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceAddAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceAddAccessKey(ctx, req.(*NamespaceAccessKeyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceDelAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAccessKeyDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceDelAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceDelAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceDelAccessKey(ctx, req.(*NamespaceAccessKeyDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_NamespaceAccessKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAccessKeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).NamespaceAccessKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceService/NamespaceAccessKeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).NamespaceAccessKeyList(ctx, req.(*NamespaceAccessKeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceService_ServiceDesc is the grpc.ServiceDesc for NamespaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NamespaceAdd",
			Handler:    _NamespaceService_NamespaceAdd_Handler,
		},
		{
			MethodName: "NamespaceDel",
			Handler:    _NamespaceService_NamespaceDel_Handler,
		},
		{
			MethodName: "NamespacesList",
			Handler:    _NamespaceService_NamespacesList_Handler,
		},
		{
			MethodName: "NamespaceAddUser",
			Handler:    _NamespaceService_NamespaceAddUser_Handler,
		},
		{
			MethodName: "NamespaceDelUser",
			Handler:    _NamespaceService_NamespaceDelUser_Handler,
		},
		{
			MethodName: "NamespaceUserList",
			Handler:    _NamespaceService_NamespaceUserList_Handler,
		},
		{
			MethodName: "NamespaceAddAccessKey",
			Handler:    _NamespaceService_NamespaceAddAccessKey_Handler,
		},
		{
			MethodName: "NamespaceDelAccessKey",
			Handler:    _NamespaceService_NamespaceDelAccessKey_Handler,
		},
		{
			MethodName: "NamespaceAccessKeyList",
			Handler:    _NamespaceService_NamespaceAccessKeyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespace.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: sysconfig.proto

package pbsysconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysConfigServiceClient is the client API for SysConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysConfigServiceClient interface {
	Update(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*SysConfig, error)
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SysConfig, error)
}

type sysConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysConfigServiceClient(cc grpc.ClientConnInterface) SysConfigServiceClient {
	return &sysConfigServiceClient{cc}
}

func (c *sysConfigServiceClient) Update(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*SysConfig, error) {
	out := new(SysConfig)
	err := c.cc.Invoke(ctx, "/SysConfigService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigServiceClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SysConfig, error) {
	out := new(SysConfig)
	err := c.cc.Invoke(ctx, "/SysConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysConfigServiceServer is the server API for SysConfigService service.
// All implementations must embed UnimplementedSysConfigServiceServer
// for forward compatibility
type SysConfigServiceServer interface {
	Update(context.Context, *SysConfig) (*SysConfig, error)
	Get(context.Context, *emptypb.Empty) (*SysConfig, error)
	mustEmbedUnimplementedSysConfigServiceServer()
}

// UnimplementedSysConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSysConfigServiceServer struct {
}

func (UnimplementedSysConfigServiceServer) Update(context.Context, *SysConfig) (*SysConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSysConfigServiceServer) Get(context.Context, *emptypb.Empty) (*SysConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSysConfigServiceServer) mustEmbedUnimplementedSysConfigServiceServer() {}

// UnsafeSysConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysConfigServiceServer will
// result in compilation errors.
type UnsafeSysConfigServiceServer interface {
	mustEmbedUnimplementedSysConfigServiceServer()
}

func RegisterSysConfigServiceServer(s grpc.ServiceRegistrar, srv SysConfigServiceServer) {
	s.RegisterService(&SysConfigService_ServiceDesc, srv)
}

func _SysConfigService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SysConfigService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServiceServer).Update(ctx, req.(*SysConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SysConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServiceServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SysConfigService_ServiceDesc is the grpc.ServiceDesc for SysConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SysConfigService",
	HandlerType: (*SysConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _SysConfigService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SysConfigService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sysconfig.proto",
}
